#!/usr/bin/env python3
"""
Vulnerability Scanner for Homework 5.3
Scans localhost for open ports and attempts to connect via HTTP and SSH
using a dictionary of common credentials.
"""

import nmap
import requests
import paramiko
import socket
import argparse
import sys
import logging
from urllib.parse import urlencode

# Suppress paramiko logging to avoid SSH connection errors
logging.getLogger("paramiko").setLevel(logging.CRITICAL)

def scan_ports(host='127.0.0.1', ignore_ports_above=9000, verbose=False):
    """
    Scan for open TCP ports on the specified host.
    Returns a list of open port numbers.
    """
    nm = nmap.PortScanner()
    
    # Scan common ports below 9000
    port_range = f"1-{ignore_ports_above-1}"
    if verbose:
        print(f"Scanning {host} ports {port_range}...", file=sys.stderr)
    
    try:
        nm.scan(host, port_range, arguments='-sT')
        open_ports = []
        
        if host in nm.all_hosts():
            for port in nm[host]['tcp']:
                if nm[host]['tcp'][port]['state'] == 'open':
                    open_ports.append(port)
        
        return sorted(open_ports)
    except Exception as e:
        print(f"Error scanning ports: {e}", file=sys.stderr)
        return []

def test_http_connection(host, port, username, password):
    """
    Test HTTP basic authentication on the specified host:port.
    Returns the server response if successful, None otherwise.
    """
    try:
        url = f"http://{host}:{port}/"
        response = requests.get(url, auth=(username, password), timeout=5)
        
        if response.status_code == 200:
            return response.text.strip()
    except Exception:
        pass
    
    return None

def test_ssh_connection(host, port, username, password):
    """
    Test SSH password authentication on the specified host:port.
    Returns the server response if successful, None otherwise.
    """
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # Set a short timeout
        client.connect(host, port=port, username=username, password=password, timeout=5, 
                      look_for_keys=False, allow_agent=False)
        
        # Try to read the server response
        # Some servers may send a message upon connection
        try:
            transport = client.get_transport()
            channel = transport.open_session()
            channel.settimeout(1)
            # The server might send output automatically
            output = channel.recv(1024).decode('utf-8').strip()
            channel.close()
            client.close()
            return output if output else "success"
        except Exception:
            # If we can't read output, just return success since we connected
            client.close()
            return "success"
    except Exception:
        # Suppress SSH connection errors - they're expected for non-SSH ports
        pass
    
    return None

def main():
    parser = argparse.ArgumentParser(description='Vulnerability scanner for localhost')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    args = parser.parse_args()
    
    # Credentials to test
    credentials = {
        'admin': 'admin',
        'root': 'abc123',
        'skroob': '12345'
    }
    
    host = '127.0.0.1'
    
    # Scan for open ports
    open_ports = scan_ports(host, verbose=args.verbose)
    
    if args.verbose:
        print(f"Found {len(open_ports)} open ports: {open_ports}", file=sys.stderr)
    
    # Test each open port
    for port in open_ports:
        if args.verbose:
            print(f"Testing port {port}...", file=sys.stderr)
        
        # Test HTTP connections
        for username, password in credentials.items():
            response = test_http_connection(host, port, username, password)
            if response is not None:
                print(f"http://{username}:{password}@{host}:{port} {response}")
        
        # Test SSH connections
        for username, password in credentials.items():
            response = test_ssh_connection(host, port, username, password)
            if response is not None:
                print(f"ssh://{username}:{password}@{host}:{port} {response}")

if __name__ == '__main__':
    main()